#include <Servo.h>
#include <PinChangeInterrupt.h>
#include <NewPing.h>
#include <Adafruit_Sensor.h>
#include <DHT.h>
#include <DHT_U.h>

// I/O pins
#define SERVO_PIN 9

#define ECHO 8
#define TRIG 7

#define IN1 3
#define IN2 11
#define IN3 5
#define IN4 6

#define leftIR 2
#define rightIR 4

// DHT definitions
#define DHTPIN 12
#define DHTTYPE DHT11 // Using DHT11
DHT_Unified dht(DHTPIN, DHTTYPE);

// States
#define stopped 14
#define forward 15
#define left 16
#define right 17
#define reverse 18

const double pi = 3.1415926;

// Servo iterations
const int divisions = 8;
// Servo direction
int direction;
Servo head;

// Motor duty cycles
int duty_cycleA;
int duty_cycleB;

// Motor states
int state;
int backingOut;

// Ultrasonic
int MAX_DISTANCE = 250;
NewPing sonar(TRIG, ECHO, MAX_DISTANCE);

// Navigation states
int corner = 0;
int corners_checked = 0;
int checking_state = 0;
int target_found = 0;
int checking_counter = 0;
int finding_state = 0;
int stuck_counter = 0;
int nav_stuck_counter = 0;
int finished = 0;
int waiting = 0;
double targetX;
double targetY;
double target_angle;

// Odometry
volatile unsigned long last_debounce_timeR = 0;
volatile unsigned long last_debounce_timeL = 0;
int irLastStateL;
int irLastStateR;
volatile int leftCounter = 0;
volatile int rightCounter = 0;
int lastTotalCounterL = 0;
int lastTotalCounterR = 0;
int totalCounterL = 0;
int totalCounterR = 0;
int currentCounterL = 0;
int currentCounterR = 0;

// Empirically determined constants
double inches_per_tick = 0.141; // 3/20
double radians_per_tick = 0.0184; // 3/20

// Distance from start position in inches
double posX = 0;
double posY = 0;
// Relative orientation in radians
double orientation = pi / 2.0; // Start facing "up" (pi/2)

double temp;

unsigned long current_time;
unsigned long elapsed_time1 = 0;
unsigned long elapsed_time2 = 0;
unsigned long elapsed_time_temp = 0;
unsigned long last_time1;
unsigned long last_time2;
unsigned long last_time_temp;
int no_print;

int nav_state = 0;

// Arrays and variables for scanning
double dists[divisions + 1];
double center_array[divisions / 3 + 1];
double left_array[divisions / 3 + 1];
double right_array[divisions / 3 + 1];
double center_min;
double right_min;
double left_min;

bool checkShouldExitObstacleAboidance(double angleto, double orientation){
  head.write(angleto - orientation);
  delay(30);
  if (watch() < 5){
    return true;
  } else {
    return false;
  }
}

void goForward(){
  state = forward;
  duty_cycleA = 128;
  duty_cycleB = 128;
  analogWrite(IN1, 0);
  analogWrite(IN2, duty_cycleA);
  analogWrite(IN3, duty_cycleB);
  analogWrite(IN4, 0);
  Serial.println("Going forward");
}

void stop(){
  state = stop;
  analogWrite(IN1, 0);
  analogWrite(IN2, 0);
  analogWrite(IN3, 0);
  analogWrite(IN4, 0);
}

void goReverse(){
  state = reverse;
  duty_cycleA = 128;
  duty_cycleB = 128;
  analogWrite(IN1, duty_cycleA);
  analogWrite(IN2, 0);
  analogWrite(IN3, 0);
  analogWrite(IN4, duty_cycleB);
  Serial.println("Reversing");
}

void turnLeft(){
  state = left;
  duty_cycleA = 128;
  duty_cycleB = 128;
  analogWrite(IN1, 0);
  analogWrite(IN2, duty_cycleA);
  analogWrite(IN3, 0);
  analogWrite(IN4, duty_cycleB);
  Serial.println("Turning left");
}

void turnRight(){
  state = right;
  duty_cycleA = 128;
  duty_cycleB = 128;
  analogWrite(IN1, duty_cycleA);
  analogWrite(IN2, 0);
  analogWrite(IN3, duty_cycleB);
  analogWrite(IN4, 0);
  Serial.println("Turning right");
}

double watch(){
  double echo_distance = sonar.ping_in();
  if (echo_distance == 0){
    echo_distance = 100;
    Serial.println("Failed reading");
  }
  return echo_distance;
}

void scan_range(double theta_0, double theta_1, int divisions){
  double delta = (theta_1 - theta_0) / divisions;
  for (int i = 0; i <= divisions; i++){
    double angle = theta_0 + i * delta;
    if (direction == 1) head.write(angle);
    else head.write(theta_1 - angle);
    last_time1 = micros();
    while (micros() < last_time1 + 40000){} // delay 
    double dist = watch();
    if (dist < 0) dist = 0;
    if (direction == 1) dists[i] = dist;
    else dists[divisions - i] = dist;
  }
  if (direction == 0) direction = 1;
  else direction = 0;
}

double getMin(double* array, int size) {
  double minVal = array[0];
  for (int i = 1; i < size; i++) {
    if (array[i] < minVal) minVal = array[i];
  }
  return minVal;
}

void getMins(){
  // Find min in the center
  for (int i = 0; i <= divisions / 3; i++){
    center_array[i] = dists[i + divisions / 3 + 1];
  }
  center_min = getMin(center_array, divisions / 3 + 1);

  // Find min on the left side
  for (int i = 0; i <= divisions / 3; i++){
    left_array[i] = dists[i + divisions * 2/3 + 1];
  }
  left_min = getMin(left_array, divisions / 3 + 1);

  // Find min on the right side
  for (int i = 0; i <= divisions / 3; i++){
    right_array[i] = dists[i];
  }
  right_min = getMin(right_array, divisions / 3 + 1);

  Serial.print("Mins: ");
  Serial.print(left_min);
  Serial.print(" ");
  Serial.print(center_min);
  Serial.print(" ");
  Serial.println(right_min);
}

void findWall(){
  Serial.println("Finding wall");

  if (corners_checked == 0) target_angle = pi/2;
  if (corners_checked == 1) target_angle = 0;
  if (corners_checked == 2) target_angle = -pi/2;
  Serial.print("Target angle: ");
  Serial.println(target_angle);

  // State 1: target angle
  if (finding_state == 1){
    Serial.print("Orientation: ");
    Serial.println(orientation);
    if (target_angle - orientation < 10.0 / 180.0 * pi && target_angle - orientation > -10.0 / 180.0 * pi){
      finding_state = 2;
    }
    else if (target_angle - orientation < 0) turnRight();
    else if (target_angle - orientation > 0) turnLeft();
  }

  // State 2: Move forward
  if (finding_state == 2){
    goForward();
    if (center_min < 12 || left_min < 12 || right_min < 12){
      finding_state = 0;
      Serial.println("Returning to normal");
    }
  }
}

void navigate(){  // Hug left wall
  if (state == stop){
    findWall();
    finding_state = 1;
  }
  if (state == forward){
    if (center_min >= 11 && left_min < 14 && left_min > 8 && right_min > 8){
      goForward();
    } else if (left_min >= 14 && right_min > 8){
      turnLeft();
    }
    else if (right_min >= 11 && left_min > 8){
      turnRight();
    }
    else {
      backingOut = 1;
      goReverse();
      Serial.println("Backing out");
    }
  }
  else if (state == right){
    if (center_min < 11){
      turnRight();
    }
    else if (backingOut && right_min >= 14 && center_min < 12) turnRight();
    else {
      goForward();
      backingOut = 0;
    }
  }
  else if (state == left){
    if (nav_stuck_counter > 5){
      findWall();
      finding_state = 1;
    }
    if (left_min >= 14){
      turnLeft();
      nav_stuck_counter++;
    }
    else {
      goForward();
      nav_stuck_counter = 0;
    }
  }
  else if (state == reverse){
    if (right_min >= 12){
      turnRight();
      backingOut = 1;
    }
    else goReverse();
  }
}

void findCorner(){
  // State 0: Find the target
  if (checking_state == 0){
    if (corners_checked == 0){
      targetX = 8 + 4;
      targetY = 6*12 - 4; 
    }
    else if (corners_checked == 1){
      targetX = 8 + 5*12 - 4;
      targetY = 6*12 - 4;
    }
    else if (corners_checked == 2){
      targetX = 8 + 5*12 - 4;
      targetY = 1*12 + 4;
    }
    else {
      Serial.println("Error: all corners have been checked");
    }
    checking_state = 1;
    stuck_counter = 0;
  }

  target_angle = atan((targetY - posY) / (targetX - posX));
  if (targetX - posX < 0){
    if (target_angle < 0) target_angle = -pi/2.0 + target_angle;
    else target_angle = pi/2.0 + target_angle;
  }
  Serial.print("Target Angle: ");
  Serial.println(target_angle);

  // State 1: orientation
  if (checking_state == 1){
    Serial.println("Commencing state 1");
    Serial.print("Orientation: ");
    Serial.println(orientation);
    if (fabs(target_angle - orientation) < (10.0 / 180.0 * pi)){
      checking_state = 2;
      stuck_counter = 0;
    }
    else if (target_angle - orientation < 0) turnRight();
    else if (target_angle - orientation > 0) turnLeft();
  }

  // State 2: traveling to goal
  if (checking_state == 2){
    Serial.println("Commencing state 2");
    if (posX > (targetX - 1) && posX < (targetX + 1) && posY > (targetY - 1) && posY < (targetY + 1)){
      checking_state = 4;
      stuck_counter = 0;
      last_time_temp = micros();
    }
    else if (fabs(target_angle - orientation) > pi/2) goReverse();
    else if (center_min > 7){
      goForward();
    }
    else {
      checking_state = 3;
      stuck_counter = 0;
    }
  }

  // State 3: obstacle avoidance
  if (checking_state == 3){
    Serial.println("Commencing state 3");
    if (posX > (targetX - 5) && posX < (targetX + 5) && posY > (targetY - 5) && posY < (targetY + 5)){
      checking_state = 4;
      stuck_counter = 0;
      last_time_temp = micros();
    }
    else if(checking_counter >= 5 || posX > (targetX + 10) || posX < (targetX - 10) || posY > (targetY + 10) || posY < (targetY - 10)){
      checking_counter = 0;
      checking_state = 1;
      stuck_counter = 0;
    }
    else{
      checking_counter++;
      navigate();
    }
  }

  // State 4: Checking temperature (via DHT)
  if (checking_state == 4){
    Serial.println("Commencing state 4");
    stop();
    Serial.print("Last time temp: ");
    Serial.println(last_time_temp);

    if (corners_checked == 2) {
      target_found = 1;
    }
    else {
      // Old analog line commented out:
      // temp = analogRead(A0) / 1024.0 * 5 * 100;

      // DHT read:
      sensors_event_t event;
      dht.temperature().getEvent(&event);
      if (!isnan(event.temperature)) {
        temp = event.temperature;
      } else {
        Serial.println("Error reading temperature!");
        temp = -1;
      }

      Serial.print("Temp: ");
      Serial.println(temp);

      // Keep your threshold logic
      if (temp > 30){
        target_found = 1;
      }
      else{
        current_time = micros();
        elapsed_time_temp = current_time - last_time_temp;
        if (elapsed_time_temp > 5000000){
          corners_checked++;
          corner = 0;
          checking_state = 0;
        }
      }
    }
  }

  stuck_counter++;
  if (stuck_counter > 10){
    stuck_counter = 0;
    checking_state = 4;
    Serial.println("I'm stuck!");
    last_time_temp = micros();
  }
  Serial.print("Stuck counter: ");
  Serial.println(stuck_counter);
}

void countL() {
  current_time = micros();
  if (current_time > last_debounce_timeL + 10000) {
    leftCounter++;
    last_debounce_timeL = current_time;
  }  
}

void countR() {
  current_time = micros();
  if (current_time > last_debounce_timeR + 10000) {
    rightCounter++;
    last_debounce_timeR = current_time;
  }  
}

void get_position(){
  noInterrupts();
  totalCounterL = leftCounter;
  totalCounterR = rightCounter;
  interrupts();

  currentCounterL = totalCounterL - lastTotalCounterL;
  currentCounterR = totalCounterR - lastTotalCounterR;

  if (state == forward){
    double distance_traveled = (currentCounterL + currentCounterR) * inches_per_tick;
    posX += cos(orientation) * distance_traveled;
    posY += sin(orientation) * distance_traveled;
  }
  else if (state == reverse){
    double distance_traveled = (currentCounterL + currentCounterR) * inches_per_tick;
    posX -= cos(orientation) * distance_traveled;
    posY -= sin(orientation) * distance_traveled;
  }
  else if (state == left){
    double dori = (currentCounterL + currentCounterR) * radians_per_tick;
    orientation += dori;
  }
  else if (state == right){
    double dori = -1 * (currentCounterL + currentCounterR) * radians_per_tick;
    orientation += dori;
  }
  
  if (orientation > pi) orientation -= 2*pi;

  lastTotalCounterL = totalCounterL;
  lastTotalCounterR = totalCounterR;
}

void setup() {
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(leftIR, INPUT);
  pinMode(rightIR, INPUT);
  pinMode(TRIG, OUTPUT);
  pinMode(ECHO, INPUT);

  analogWrite(IN1, 0);
  analogWrite(IN2, 0);
  analogWrite(IN3, 0);
  analogWrite(IN4, 0);

  digitalWrite(TRIG, LOW);
  
  head.attach(SERVO_PIN);
  head.write(180); // left position
  delay(200);

  irLastStateL = digitalRead(leftIR);
  irLastStateR = digitalRead(rightIR);
  attachInterrupt(digitalPinToInterrupt(leftIR), countL, CHANGE);
  attachPCINT(digitalPinToPCINT(rightIR), countR, CHANGE);
  
  Serial.begin(9600);

  backingOut = 0;
  direction = 0; // scanning left -> right
  no_print = 0;

  stop();
  delay(200);
  last_time1 = micros();
  last_time2 = micros();
  goForward();

  // Initialize DHT sensor
  dht.begin();
}

void loop() {
  current_time = micros();
  elapsed_time1 = current_time - last_time1;

  if (!target_found){
    scan_range(0, 180, divisions); 
    get_position(); 

    // Read the DHT sensor
    sensors_event_t event;
    dht.temperature().getEvent(&event);
    if (!isnan(event.temperature)) {
      temp = event.temperature;
    } else {
      Serial.println("Error reading temperature!");
      temp = -1;
    }

    // *** Always print for debugging ***
    Serial.print("Debug Temp: ");
    Serial.println(temp);

    // Your threshold check if temp > 30
    if (temp > 30 && waiting == 0){
      stop();
      Serial.print("Temp: ");
      Serial.println(temp);
      last_time1 = current_time;
      elapsed_time1 = 0;
      waiting = 1;
    }
    else if (state == stop && elapsed_time1 > 5000000){
      target_found = 1;
      waiting = 0;
    }
    else {
      if (!corner){
        if (corners_checked == 0){
          if (posY > 4.5*12) corner = 1;
        }
        if (corners_checked == 1){
          if (posX > 4.5*12) corner = 1;
        }
        if (corners_checked == 2){
          if (posY < 2.5*12) corner = 1;
        }
      }
      getMins();
      if (finding_state) findWall();
      else if (!corner) navigate();
      else findCorner();
    }

    Serial.print("Position: ");
    Serial.print(posX);
    Serial.print(", ");
    Serial.println(posY);

    Serial.print("Orientation: ");
    Serial.println(orientation * 180 / pi);

    Serial.print("Total left coutner: ");
    Serial.println(totalCounterL);

    Serial.print("Total right counter:");
    Serial.println(totalCounterR);
  }
  else if (!finished){
    scan_range(0, 180, divisions);
    get_position();
    getMins();
    navigate();
    if (posX < 2*12 && posY < 2*12){
      stop();
      noInterrupts();
      finished = 1;
    }
  }
}
